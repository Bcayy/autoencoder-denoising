# -*- coding: utf-8 -*-
"""Untitled

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1qGh48Rd0y6phV0wU352MLxXNDobFc0RI
"""

# 💾 Gerekli kütüphaneler
import numpy as np
import matplotlib.pyplot as plt
from tensorflow.keras.datasets import mnist
from tensorflow.keras.models import Model
from tensorflow.keras.layers import Input, Conv2D, MaxPooling2D, UpSampling2D, Dropout
from tensorflow.keras.optimizers import Adam

# 📦 MNIST verisi
(_, _), (x_test, _) = mnist.load_data()
x_test = x_test.astype('float32') / 255.
x_test = np.reshape(x_test, (len(x_test), 28, 28, 1))

# 🌫️ Gürültü ekle
noise_factor = 0.5
x_test_noisy = np.clip(x_test + noise_factor * np.random.normal(0, 1, x_test.shape), 0., 1.)

# 🧱 Modeli oluştur
input_img = Input(shape=(28, 28, 1))
x = Conv2D(64, (3, 3), activation='relu', padding='same')(input_img)
x = MaxPooling2D((2, 2), padding='same')(x)
x = Dropout(0.2)(x)
x = Conv2D(64, (3, 3), activation='relu', padding='same')(x)
encoded = MaxPooling2D((2, 2), padding='same')(x)

x = Conv2D(64, (3, 3), activation='relu', padding='same')(encoded)
x = UpSampling2D((2, 2))(x)
x = Dropout(0.2)(x)
x = Conv2D(64, (3, 3), activation='relu', padding='same')(x)
x = UpSampling2D((2, 2))(x)
decoded = Conv2D(1, (3, 3), activation='sigmoid', padding='same')(x)

autoencoder = Model(input_img, decoded)
autoencoder.compile(optimizer=Adam(), loss='binary_crossentropy')

# ⚡ Kısa eğitim (hızlıca sadece 2 epoch)
autoencoder.fit(x_test_noisy[:1000], x_test[:1000], epochs=2, batch_size=128, verbose=0)

# 🧪 Tahmin
decoded_imgs = autoencoder.predict(x_test_noisy)

# 🖼️ Supplementary görseller
def save_sample_plot(indices, filename):
    plt.figure(figsize=(20, 4))
    for i, idx in enumerate(indices):
        ax = plt.subplot(3, len(indices), i + 1)
        plt.imshow(x_test_noisy[idx].reshape(28, 28), cmap="gray")
        plt.axis("off")
        if i == 0:
            ax.set_ylabel("Noisy")

        ax = plt.subplot(3, len(indices), i + 1 + len(indices))
        plt.imshow(decoded_imgs[idx].reshape(28, 28), cmap="gray")
        plt.axis("off")
        if i == 0:
            ax.set_ylabel("Denoised")

        ax = plt.subplot(3, len(indices), i + 1 + 2 * len(indices))
        plt.imshow(x_test[idx].reshape(28, 28), cmap="gray")
        plt.axis("off")
        if i == 0:
            ax.set_ylabel("Original")

    plt.tight_layout()
    plt.savefig(filename)
    plt.close()

# 💾 Kaydet
save_sample_plot([0, 1, 2, 3, 4], "supp_denoised_1.png")
save_sample_plot([5, 6, 7, 8, 9], "supp_denoised_2.png")